#!/usr/bin/env python3

from collections import defaultdict, deque

class Solution:
    def minScore(self, n: int, roads: List[List[int]]) -> int:

        # arrange data into graph with defaultdict
        graph = defaultdict(dict)
        for cityA, cityB, dist in roads: # iterate over tuples
          graph[cityA][cityB] = graph[cityB][cityA] = dist # bidirectional roads

        result = None # saw inf here - easier min(result, distance) later
        visited = set()
        queue = deque([1]) # nodes visited but not yet processed # init 1
        
        while queue:
          node = queue.popleft() # take leftmost val each time and check for possible destinations
          for adjacent, distance in graph[node].items(): #clear from this why we wanted the graph in dict
            if adjacent not in visited:
              queue.append(adjacent)
              visited.add(adjacent) # remember set has add rather than append 
            if result == None or distance < result:
              result = distance

        return result 
